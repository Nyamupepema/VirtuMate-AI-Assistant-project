# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\jarvisUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_jarvisUi(object):
    def setupUi(self, jarvisUi):
        jarvisUi.setObjectName("jarvisUi")
        jarvisUi.resize(984, 572)
        self.centralwidget = QtWidgets.QWidget(jarvisUi)
        self.centralwidget.setObjectName("centralwidget")
        
        # Background label
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-10, -10, 1021, 601))
        self.label.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label.setText("")
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        
        # Animated GIFs
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, -30, 411, 301))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("C:/Users/ADMIN/OneDrive/Desktop/ai model 1/Jarvis-AI-main/Material/new.gif"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(655, 250, 391, 201))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("C:/Users/ADMIN/OneDrive/Desktop/ai model 1/Jarvis-AI-main/Material/path.gif"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(720, 20, 261, 221))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("C:/Users/ADMIN/OneDrive/Desktop/ai model 1/Jarvis-AI-main/Material/logo.gif"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        
        # Adding a horizontal line above the input box
        self.lineAboveInput = QtWidgets.QFrame(self.centralwidget)
        self.lineAboveInput.setGeometry(QtCore.QRect(50, 500, 908, 1))
        self.lineAboveInput.setStyleSheet("background-color: grey;")
        self.lineAboveInput.setFrameShape(QtWidgets.QFrame.HLine)
        self.lineAboveInput.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.lineAboveInput.setObjectName("lineAboveInput")

        # Input box
        self.inputBox = QtWidgets.QLineEdit(self.centralwidget)
        self.inputBox.setGeometry(QtCore.QRect(50, 510, 400, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(16)
        self.inputBox.setFont(font)
        self.inputBox.setStyleSheet("background:transparent; border-radius:none; color:white;")
        self.inputBox.setPlaceholderText("Enter command here...")
        self.inputBox.setObjectName("inputBox")
        
        # Terminal display with automatic scrolling
        self.outputDisplay = QtWidgets.QTextEdit(self.centralwidget)
        self.outputDisplay.setGeometry(QtCore.QRect(50, 200, 400, 250))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.outputDisplay.setFont(font)
        self.outputDisplay.setStyleSheet("background:transparent; border: 1px solid black; color:white;")
        self.outputDisplay.setReadOnly(True)
        self.outputDisplay.setObjectName("outputDisplay")

        # Buttons 
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(830, 510, 60, 30))
        self.pushButton.setStyleSheet(
            "background-color: rgb(0, 255, 0); "
            "color: rgb(0, 0, 0); "
            "border-radius: 5px; "
            "border: none; "
            "font-family: \"Verdana\"; "
            "font-size: 8pt; "
            "font-weight: bold;"
        )
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(900, 510, 60, 30))
        self.pushButton_2.setStyleSheet(
            "background-color: rgb(255, 0, 0); "
            "color: rgb(0, 0, 0); "
            "border-radius: 5px; "
            "border: none; "
            "font-family: \"Verdana\"; "
            "font-size: 8pt; "
            "font-weight: bold;"
        )
        self.pushButton_2.setObjectName("pushButton_2")

        # Connect button click to function
        self.pushButton.clicked.connect(self.process_command)  # Start processing command

        jarvisUi.setCentralWidget(self.centralwidget)
        self.retranslateUi(jarvisUi)
        QtCore.QMetaObject.connectSlotsByName(jarvisUi)

    def retranslateUi(self, jarvisUi):
        _translate = QtCore.QCoreApplication.translate
        jarvisUi.setWindowTitle(_translate("jarvisUi", "VirtuMate AI Assistant"))
        self.pushButton.setText(_translate("jarvisUi", "Start"))
        self.pushButton_2.setText(_translate("jarvisUi", "Exit"))

    # Method to update the output display and ensure auto-scrolling
    def update_output(self, text):
        self.outputDisplay.append(text)  # Append new text
        self.outputDisplay.moveCursor(QtGui.QTextCursor.End)  # Move cursor to the latest line
        self.outputDisplay.ensureCursorVisible()  # Ensure the cursor is visible

    # Example function to process user input
    def process_command(self):
        user_input = self.inputBox.text()  # Get user input
        if user_input:
            self.update_output(f"User: {user_input}")  # Display user input
            response = self.get_response(user_input)  # Process the input (define this function)
            self.update_output(f"AI: {response}")  # Display AI response
            self.inputBox.clear()  # Clear input field

      
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    jarvisUi = QtWidgets.QMainWindow()
    ui = Ui_jarvisUi()
    ui.setupUi(jarvisUi)
    jarvisUi.show()
    sys.exit(app.exec_())
